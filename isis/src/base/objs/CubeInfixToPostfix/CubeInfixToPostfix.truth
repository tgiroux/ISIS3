-------------------------------------------------------
Test CubeInfixToPostfix


1: Convert '-4' to postfix
   Tokenized equation: '( -- ( 4 ) )'
   Postfix: '4 --'


2: Convert '1*2' to postfix
   Tokenized equation: '1 * 2'
   Postfix: '1 2 *'


3: Convert '((1)+(1))' to postfix
   Tokenized equation: '( ( 1 ) + ( 1 ) )'
   Postfix: '1 1 +'


4: Convert '1*2/2-2' to postfix
   Tokenized equation: '1 * 2 / 2 - 2'
   Postfix: '1 2 * 2 / 2 -'


5: Convert 'sin(5)' to postfix
   Tokenized equation: '( sin ( 5 ) )'
   Postfix: '5 sin'


6: Convert 'sin 5' to postfix
**USER ERROR** Missing parenthesis after sin.


7: Convert '--sin(-(f54+f65()))' to postfix
   Tokenized equation: '( -- ( ( sin ( ( -- ( ( f54 ( ) ) + ( f65 ( ) ) ) ) ) ) ) )'
   Postfix: 'f54 f65 + -- sin --'


8: Convert '--sin(-f54+--f65)' to postfix
   Tokenized equation: '( -- ( ( sin ( ( -- ( ( f54 ( ) ) ) ) + ( -- ( ( f65 ( ) ) ) ) ) ) ) )'
   Postfix: 'f54 -- f65 -- + sin --'


9: Convert '2/3^6' to postfix
   Tokenized equation: '2 / 3 ^ 6'
   Postfix: '2 3 6 ^ /'


10: Convert 'atan2(5,--4)' to postfix
   Tokenized equation: '( atan2 ( ( 5 ) , ( -- ( 4 ) ) ) )'
   Postfix: '5 4 -- atan2'


11: Convert 'atan2(--5)' to postfix
**USER ERROR** There were not enough arguments supplied to the function 'atan2'.


12: Convert 'atan2(1,2,3)' to postfix
**USER ERROR** There were too many arguments supplied to the function 'atan2'.


13: Convert 'atan2(1,)' to postfix
**USER ERROR** Argument 2 in function atan2 must not be empty.


14: Convert 'atan2(1,2' to postfix
**USER ERROR** The definition of 'atan2' is not complete.


15: Convert 'f999-f548-f126^2' to postfix
   Tokenized equation: '( f999 ( ) ) - ( f548 ( ) ) - ( f126 ( ) ) ^ 2'
   Postfix: 'f999 f548 - f126 2 ^ -'


16: Convert 'sin(0)^2' to postfix
   Tokenized equation: '( sin ( 0 ) ) ^ 2'
   Postfix: '0 sin 2 ^'


17: Convert 'somefunc(5)' to postfix
   Tokenized equation: 'somefunc ( 5 )'
**USER ERROR** The operator 'somefunc' is not recognized.


18: Convert '3#3' to postfix
   Tokenized equation: '3 # 3'
**USER ERROR** The operator '#' is not recognized.


19: Convert '(f3)(f2)' to postfix
   Tokenized equation: '( ( f3 ( ) ) ) ( ( f2 ( ) ) )'
**USER ERROR** Missing an operator before f2.


20: Convert '(3)(2)' to postfix
   Tokenized equation: '( 3 ) ( 2 )'
**USER ERROR** Missing an operator before 2.


21: Convert 'atan2(1+2/3^(--6), 5^ (tan ( 42 ^ (f1 / --f264) / 4 ) - 65 ) != 0)' to postfix
   Tokenized equation: '( atan2 ( ( 1 + 2 / 3 ^ ( ( -- ( 6 ) ) ) ) , 5 ^ ( ( tan ( 42 ^ ( ( f1 ( ) ) / ( -- ( ( f264 ( ) ) ) ) ) / 4 ) ) - 65 ) != 0 ) )'
   Postfix: '1 2 3 6 -- ^ / + 5 42 f1 f264 -- / ^ 4 / tan 65 - ^ 0 != atan2'


22: Convert '1++2' to postfix
   Tokenized equation: '1 + + 2'
**USER ERROR** Missing an operand near the operator '+'.


23: Convert '1+-2' to postfix
   Tokenized equation: '1 + ( -- ( 2 ) )'
   Postfix: '1 2 -- +'


24: Convert '(1+3*(4)' to postfix
   Tokenized equation: '( 1 + 3 * ( 4 )'
**USER ERROR** There are too many opening parentheses ('(') in the equation.


25: Convert '(1+3*(4)))' to postfix
   Tokenized equation: '( 1 + 3 * ( 4 ) ) )'
**USER ERROR** There are too many closing parentheses (')') in the equation.
